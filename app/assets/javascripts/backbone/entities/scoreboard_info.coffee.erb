@App.module "Entities", (Entities, App, Backbone, Marionette, $, _) ->

  class Entities.ScoreboardInfo extends Backbone.Model
    reloadResults: (options = {}) ->
      return if @noResultsReload
      @preselectedRefconId = options.refconId
      results = @get 'results'
      results.fetchForFilter @get('localityId'), @get('region'), @get('refcon')

    pickResult: ->
      results = @get 'results'
      if @preselectedRefconId?
        result = results.get @preselectedRefconId
        @preselectedRefconId = null
      result || results.first()

    disableResultsReload: -> @noResultsReload = true
    enableResultsReload: -> @noResultsReload = false

  API =
    getScoreboardInfo: ->
      unless Entities.scoreboardInfo?
        Entities.scoreboardInfo = sb = new Entities.ScoreboardInfo
          localityId:       gon.locality_id
          localityName:     gon.locality_name
          localityInfo:     gon.locality_info
          electionInfo:     gon.election_info

          results:          new Entities.ResultsCollection
          result:           null
          precinctResults:  new Entities.PrecinctResultData

          refcon:           new Backbone.Model({ name: 'All Federal Contests', type: 'all', id: 'federal' })
          refconLabel:      ->
            type = @refcon.get('type')
            if type == 'all'
              id = @refcon.get('id')
              gon.categories[id]
            else
              @refcon.get('name')

          region:           null
          regionLabel:      -> if !@region then "<%= I18n.t 'scoreboard.header.right_menu.tabs.all' %>" else @region.get('name')
          percentReporting: gon.percentReporting

        App.vent.on 'filters:set', (options = {}) ->
          sb.disableResultsReload()
          App.vent.trigger 'region:selected', options.region
          # App.vent.trigger 'category:selected', options.category or gon.defaultCategory
          sb.enableResultsReload()

          sb.reloadResults
            refconId: options.refconId

        App.vent.on 'region:selected', (region) ->
          sb.set 'region', region

        App.vent.on 'refcon:selected', (refcon) ->
          sb.set 'refcon', refcon

        # App.vent.on 'category:selected', (category) ->
        #   sb.set 'category', category

        App.vent.on 'result:selected', (result) ->
          sb.set 'result', result

        sb.on 'change:region change:refcon', -> @reloadResults()

        sb.get('results').on 'reset', ->
          result = sb.pickResult()
          sb.set 'result', result

        sb.on 'change:result', ->
          result  = sb.get 'result'
          region  = sb.get 'region'
          results = sb.get 'precinctResults'
          results.fetchForResult result, region

        # sb.reloadResults()

      Entities.scoreboardInfo

  App.reqres.setHandler 'entities:scoreboardInfo', -> API.getScoreboardInfo()
