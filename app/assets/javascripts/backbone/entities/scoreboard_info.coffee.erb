@App.module "Entities", (Entities, App, Backbone, Marionette, $, _) ->

  class Entities.ScoreboardInfo extends Backbone.Model
    reloadResults: (options = {}) ->
      return if @noResultsReload
      @preselectedRefconId = options.refcon?.id
      results = @get 'results'
      results.fetchForFilter @get('localityId'), @get('region'), @get('refcon')

    pickResult: ->
      results = @get 'results'
      if @preselectedRefconId?
        result = results.get @preselectedRefconId
        @preselectedRefconId = null
      result || results.first()

    disableResultsReload: -> @noResultsReload = true
    enableResultsReload: -> @noResultsReload = false

  API =
    getScoreboardInfo: ->
      unless Entities.scoreboardInfo?
        Entities.scoreboardInfo = window.sb = sb = new Entities.ScoreboardInfo
          localityId:       gon.locality_id
          localityName:     gon.locality_name
          localityInfo:     gon.locality_info
          electionInfo:     gon.election_info

          results:          new Entities.ResultsCollection
          result:           null
          precinctColors:   new Entities.PrecinctColors
          precinctResults:  new Entities.PrecinctResultData

          precinctsReportingCount:  0
          totalBallotsCast:         0
          totalValidVotes:          0
          totalRegisteredVoters:    0

          refcon:           App.request('entities:refcon:all-Federal')
          refconLabel:      ->
            type = @refcon.get('type')
            if type == 'all'
              id = @refcon.get('id')
              gon.categories[id]
            else
              @refcon.get('name')
            @refcon.get('name')

          region:           null
          regionLabel:      -> if !@region then "<%= I18n.t 'scoreboard.header.right_menu.tabs.all' %>" else @region.get('name')
          percentReporting: gon.percentReporting
          view:             null
          showParticipation: false
          percentageType:   'ballots'

        App.vent.on 'filters:set', (options = {}) ->
          su = App.request 'entities:scoreboardUrl'
          su.disable()
          sb.disableResultsReload()
          if options.region?
            App.vent.trigger 'region:selected', options.region
          if options.refcon?
            App.vent.trigger 'refcon:selected', options.refcon
          sb.enableResultsReload()
          su.enableAndUpdate()

          sb.reloadResults
            refcon: options.refcon

        App.vent.on 'region:selected', (region) ->
          sb.set 'region', region

        App.vent.on 'refcon:selected', (refcon) ->
          sb.set 'refcon', refcon

        App.vent.on 'result:selected', (result) ->
          sb.set 'result', result

        sb.on 'change:region change:refcon', -> @reloadResults()

        sb.get('precinctResults').on 'reset', ->
          # compute stats
          precinctResults = sb.get('precinctResults')
          precincts = precinctResults.get('precincts')
          sb.set 'precinctsReportingCount', precincts.length
          sb.set 'totalRegisteredVoters', precinctResults.get('voters')
          sb.set 'totalBallotsCast', precinctResults.get('ballots')
          sb.set 'totalValidVotes', precinctResults.get('votes')

        sb.get('results').on 'reset', ->
          result = sb.pickResult()
          sb.set 'result', result

        sb.on 'change:result', ->
          result  = sb.get 'result'
          region  = sb.get 'region'

          sb.set 'precinctsReportingCount', 0
          sb.set 'totalRegisteredVoters', 0
          sb.set 'totalBallotsCast', 0
          sb.set 'totalValidVotes', 0
        
          App.execute 'when:fetched', App.request('entities:precincts'), =>
            colors  = sb.get 'precinctColors'
            colors.fetchForResult result, region

            results = sb.get 'precinctResults'
            results.fetchForResult result, region

      Entities.scoreboardInfo

  App.reqres.setHandler 'entities:scoreboardInfo', -> API.getScoreboardInfo()
