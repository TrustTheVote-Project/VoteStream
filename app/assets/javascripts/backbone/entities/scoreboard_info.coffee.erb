@App.module "Entities", (Entities, App, Backbone, Marionette, $, _) ->

  class Entities.ScoreboardInfo extends Backbone.Model
    reloadRefcons: ->
      refcons = @get 'refcons'
      refcons.fetchForFilter @get('localityId'), @get('region'), @get('category')

  API =
    getScoreboardInfo: ->
      unless Entities.scoreboardInfo?
        Entities.scoreboardInfo = sb = new Entities.ScoreboardInfo
          localityId:       gon.locality_id
          localityName:     gon.locality_name
          localityInfo:     gon.locality_info
          electionInfo:     gon.election_info

          refcons:          new Entities.RefCons
          refcon:           null
          results:          new Entities.Results

          category:         null
          categoryLabel:    "<%= I18n.t 'scoreboard.header.left_menu.none' %>"

          region:           null
          regionLabel:      -> if !@region then "<%= I18n.t 'scoreboard.header.right_menu.tabs.all' %>" else @region.get('name')
          percentReporting: -> 29

        App.vent.on 'region:selected', (region) ->
          sb.set 'region', region

        App.vent.on 'category:selected', (o) ->
          sb.set 'category', o.category
          sb.set 'categoryLabel', o.label

        sb.on 'change:category', -> @reloadRefcons()
        sb.on 'change:region', -> @reloadRefcons()

        sb.on 'change:refcon', ->
          results = @get 'results'
          results.fetchForRefCon @get('refcon'), @get('region')

        sb.get('refcons').on 'reset', ->
          si = App.request 'entities:scoreboardInfo'
          si.set 'refcon', @first() or null

        sb.reloadRefcons()

      Entities.scoreboardInfo

  App.reqres.setHandler 'entities:scoreboardInfo', -> API.getScoreboardInfo()
