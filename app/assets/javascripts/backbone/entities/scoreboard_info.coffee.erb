@App.module "Entities", (Entities, App, Backbone, Marionette, $, _) ->

  class Entities.ScoreboardInfo extends Backbone.Model
    reloadResults: (options = {}) ->
      return if @noResultsReload
      @preselectedRefconId = options.refcon?.id
      results = @get 'results'
      results.fetchForFilter @get('localityId'), @get('region'), @get('refcon'), this.extraOpts()

    pickResult: ->
      results = @get 'results'
      if @preselectedRefconId?
        result = results.get @preselectedRefconId
        @preselectedRefconId = null
      result || results.first()

    disableResultsReload: -> @noResultsReload = true
    enableResultsReload: -> @noResultsReload = false
    
    extraOpts: -> {
      channel_early: @get('channelEarly'),
      channel_electionday: @get('channelElectionday'),
      channel_absentee: @get('channelAbsentee')
      }

  API =
    getScoreboardInfo: ->
      unless Entities.scoreboardInfo?
        Entities.scoreboardInfo = window.sb = sb = new Entities.ScoreboardInfo
          localityId:       gon.locality_id
          localityName:     gon.locality_name
          localityInfo:     gon.locality_info
          electionInfo:     gon.election_info

          results:            new Entities.ResultsCollection
          result:             null
          precinctColors:     new Entities.PrecinctColors
          precinctResults:    new Entities.PrecinctResultData
          channelEarly:       true
          channelElectionday: true
          channelAbsentee:    true

          precinctsReportingCount:  0
          totalBallotsCast:         0
          totalValidVotes:          0
          totalRegisteredVoters:    0
          electionDayVotes:         0
          earlyVotes:               0
          absenteeVotes:            0
          npVotes:                  0
          
          
          refcon:           App.request('entities:refcon:all-Federal')
          refconLabel:      ->
            type = @refcon.get('type')
            if type == 'all'
              id = @refcon.get('id')
              gon.categories[id]
            else
              @refcon.get('name')
            @refcon.get('name')

          region:            null
          regionLabel:       -> if !@region then "<%= I18n.t 'scoreboard.header.right_menu.tabs.all' %>" else @region.get('name')
          percentReporting:  gon.percentReporting
          view:              null
          coloringType:      'results'
          map_type:          null
          showParticipation: true
          showVotingMethod:  false
          percentageType:    'ballots' # Can be 'ballots' or 'voters'

        App.vent.on 'filters:set', (options = {}) ->
          su = App.request 'entities:scoreboardUrl'
          su.disable()
          sb.disableResultsReload()
          if options.region?
            App.vent.trigger 'region:selected', options.region
          if options.refcon?
            App.vent.trigger 'refcon:selected', options.refcon
          if options.channelElectionday?
            App.vent.trigger 'channelElectionday:selected', options.channelElectionday
          if options.channelEarly?
            App.vent.trigger 'channelEarly:selected', options.channelEarly
          if options.channelAbsentee?
            App.vent.trigger 'channelAbsentee:selected', options.channelAbsentee
          sb.enableResultsReload()
          su.enableAndUpdate()

          sb.reloadResults
            refcon: options.refcon

        App.vent.on 'region:selected', (region) ->
          sb.set 'region', region

        App.vent.on 'refcon:selected', (refcon) ->
          sb.set 'refcon', refcon

        App.vent.on 'channelElectionday:selected', (channelElectionday) ->
          sb.set 'channelElectionday', channelElectionday

        App.vent.on 'channelEarly:selected', (channelEarly) ->
          sb.set 'channelEarly', channelEarly

        App.vent.on 'channelAbsentee:selected', (channelAbsentee) ->
          sb.set 'channelAbsentee', channelAbsentee

        App.vent.on 'result:selected', (result) ->
          sb.set 'result', result

        sb.on 'change:region change:refcon change:channel', -> @reloadResults()
        sb.on 'change:channelEarly change:channelElectionday change:channelAbsentee', (e) -> @reloadResults()

        sb.get('precinctResults').on 'reset', ->
          # compute stats
          precinctResults = sb.get('precinctResults')
          precincts = precinctResults.get('precincts')
          sb.set 'precinctsReportingCount', precincts.length
          sb.set 'totalRegisteredVoters', precinctResults.get('voters')
          sb.set 'totalBallotsCast', precinctResults.get('ballots')
          sb.set 'totalValidVotes', precinctResults.get('votes')
          if precinctResults.get('channels')
            sb.set 'electionDayVotes', precinctResults.get('channels')['election-day']
            sb.set 'earlyVotes', precinctResults.get('channels')['early']
            sb.set 'absenteeVotes', precinctResults.get('channels')['absentee']
            sb.set 'npVotes', sb.get('totalRegisteredVoters') - sb.get('totalBallotsCast')
            
        sb.get('results').on 'reset', ->
          result = sb.pickResult()
          sb.set 'result', result

        sb.on 'change:result', ->
          result  = sb.get 'result'
          region  = sb.get 'region'

          sb.set 'precinctsReportingCount', 0
          sb.set 'totalRegisteredVoters', 0
          sb.set 'totalBallotsCast', 0
          sb.set 'totalValidVotes', 0
          sb.set 'electionDayVotes', 0
          sb.set 'earlyVotes', 0
          sb.set 'absenteeVotes', 0
          sb.set 'npVotes', 0
        
          App.execute 'when:fetched', App.request('entities:precincts'), =>
            colors  = sb.get 'precinctColors'
            colors.fetchForResult result, region

            results = sb.get 'precinctResults'
            results.fetchForResult result, region, sb.extraOpts()

      Entities.scoreboardInfo

  App.reqres.setHandler 'entities:scoreboardInfo', -> API.getScoreboardInfo()
