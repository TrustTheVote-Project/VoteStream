@App.module "Entities", (Entities, App, Backbone, Marionette, $, _) ->

  class Entities.ScoreboardInfo extends Backbone.Model
    reloadResults: ->
      results = @get 'results'
      results.fetchForFilter @get('localityId'), @get('region'), @get('category')


  API =
    getScoreboardInfo: ->
      unless Entities.scoreboardInfo?
        Entities.scoreboardInfo = sb = new Entities.ScoreboardInfo
          localityId:       gon.locality_id
          localityName:     gon.locality_name
          localityInfo:     gon.locality_info
          electionInfo:     gon.election_info

          results:          new Entities.ResultsCollection
          result:           null
          precinctResults:  new Entities.PrecinctResultData

          category:         null
          categoryLabel:    -> gon.categories[@category] || "<%= I18n.t 'scoreboard.header.left_menu.none' %>"

          region:           null
          regionLabel:      -> if !@region then "<%= I18n.t 'scoreboard.header.right_menu.tabs.all' %>" else @region.get('name')
          percentReporting: -> 29

        App.vent.on 'region:selected', (region) ->
          sb.set 'region', region

        App.vent.on 'category:selected', (category) ->
          sb.set 'category', category

        App.vent.on 'result:selected', (result) ->
          sb.set 'result', result

        sb.on 'change:region change:category', -> @reloadResults()

        sb.get('results').on 'reset', ->
          result  = sb.get 'result'
          results = sb.get 'results'
          if results.indexOf(result) == -1
            sb.set 'result', results.first()

        sb.on 'change:result', ->
          result  = sb.get 'result'
          region  = sb.get 'region'
          results = sb.get 'precinctResults'
          results.fetchForResult result, region

        sb.reloadResults()

      Entities.scoreboardInfo

  App.reqres.setHandler 'entities:scoreboardInfo', -> API.getScoreboardInfo()
