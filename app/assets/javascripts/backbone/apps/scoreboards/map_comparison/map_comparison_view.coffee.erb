@App.module "ScoreboardsApp.MapComparison", (MapComparison, App, Backbone, Marionette, $, _) ->

  class MapComparison.View extends Marionette.Layout
    template: 'scoreboards/map_comparison/view'
    id: 'map_comparison'

    # regions:
      #filterBarRegion:              '#filter-bar-region'
      #mapListRegion:                '#map-list-region'

    initialize: ->
      @si = App.request 'entities:scoreboardInfo'
      @su = App.request 'entities:scoreboardUrl'
      @selected_maps = @si.get 'mapComparisonIds'
      @saved_maps = App.request "entities:savedMaps"
      
    events:
      'click #js-view-back': (e) -> window.history.back()
      
    
    maps: ->
      maps = []
      for map in @saved_maps.maps()        
        if @selected_maps.includes(map.id + '')
          maps.push(map)
      maps
      
      
    templateHelpers: ->
      maps: =>
        @maps()
        
        
    onShow: ->
      waitingFor = []
      waitingFor.push App.request('entities:refcons')
      waitingFor.push App.request('entities:districts')
      waitingFor.push App.request('entities:precincts')

      $("span.visible-map-toggle").click ->
        id = $(@).data('map-id')
        $("#map-comparison-item-#{id}").toggleClass('hide-map')

      App.execute 'when:fetched', waitingFor, =>
        for map in @maps()
          #"map/:ctype-:cid(/:region)(/:params)": "show"
          filters = map.getFilters()
        
          extraOpts = {
            channel_early: filters.channelEarly,
            channel_electionday: filters.channelElectionday,
            channel_absentee: filters.channelAbsentee
          }
        
          advanced = null #get from url if it matches a different one
        
          resultsColl = new App.Entities.ResultsCollection
          resultsColl.fetchForFilter(filters.region, filters.refcon, extraOpts, advanced)
          
          @listenTo resultsColl, 'sync', ((map, filters, advanced, results)->
            result = null # Specific selecte result / contesnt ?
            result = result || results.first()

            precinctResults = new App.Entities.PrecinctResultData
            precinctResults.fetchForResult result, filters.region, extraOpts, advanced

            precinctColors = new App.Entities.PrecinctColors
            precinctColors.fetchForResult result, filters.region, advanced
            
            $("#map-description-region-#{map.id}").text(map.getDescription())
          
            @addRegion("newMapRegion", "#map-region-#{map.id}")
            @newMapRegion.show new App.ScoreboardsApp.Show.MapView
              infoWindow: true
              noPanning: false
              precinctResults: precinctResults
              precinctColors:  precinctColors
              precincts: App.request 'entities:precincts'
              coloringType: filters.coloringType || 'results'
          ).bind(this, map, filters, advanced)
          