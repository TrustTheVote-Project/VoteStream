# alternative panning to fit just the bubble
InfoBubble.prototype.panToView = ->
  projection = @getProjection()

  return if !projection
  return if !@bubble_
  
  anchorHeight = @getAnchorHeight_()
  height       = @bubble_.offsetHeight + anchorHeight
  gMap         = @get('gMap')
  mapDiv       = gMap.getDiv()
  mapHeight    = mapDiv.offsetHeight
  latLng       = @getPosition()
  centerPos    = projection.fromLatLngToContainerPixel(gMap.getCenter())
  pos          = projection.fromLatLngToContainerPixel(latLng)

  padding      = 20 # 20 pixels padding around bubble
  yDelta       = (height + padding) - pos.y

  if yDelta > 0
    centerPos.y -= yDelta
    gMap.panTo(projection.fromContainerPixelToLatLng(centerPos))


@App.module "ScoreboardsApp.Show", (Show, App, Backbone, Marionette, $, _) ->

  class Show.MapView extends Marionette.ItemView
    template: 'scoreboards/show/_map'
    className: 'map-view'

    initialize: (options = {}) ->
      @polygons = []
      @options = options

      @initColors()

      #@si = si = App.request 'entities:scoreboardInfo'
      @precinctResults = @options.precinctResults #si.get 'precinctResults'

      if @options.staticColors
        @precinctColors = @options.staticColors
      else
        @precinctColors = @options.precinctColors #si.get 'precinctColors'
        @precinctColors.on 'sync', @updateColors, @
        #si.on 'change:coloringType', @updateColors, @

      @precincts = @options.precincts #App.request 'entities:precincts'

    updateColors: ->
      @closeInfoWindow()
      @updateColorKey()

      precincts = @precinctResults.get('precincts')

      for p in @polygons
        color = @precinctColors.get p.data.precinctId
        newColors = @findPrecinctColors(color)
        p.data.colors = newColors
        p.setOptions p.data.colors

      undefined

    onShow: ->
      @renderPrecincts()

    onClose: ->
      @closeInfoWindow()
      @removePreviousPolygons()
      @precinctColors.off 'sync', @updateColors, @
      delete @gMap
      @initMap
      
      # Looks like everything initialized in #initialize is reused,
      # so can't delete it here
      #delete @polygons
      #delete @precinctColors
      #delete @precinctResults
      #delete @precincts

    closeInfoWindow: ->
      if @timeout
        clearTimeout @timeout
        @timeout = null

      if window.infoBubble?
        do (bubble = window.infoBubble) ->
          setTimeout (->
            bubble.close()
            $(bubble.bubble_).remove()
          ), 0
        window.infoBubble = null

    initMap: ->
      center = new google.maps.LatLng gon.mapCenterLat, gon.mapCenterLon
      mapOptions =
        center:                 center
        zoom:                   @options.zoomLevel || gon.mapZoom
        mapTypeId:              google.maps.MapTypeId.ROADMAP

      # https://developers.google.com/maps/documentation/javascript/controls
      if @options.hideControls
        mapOptions.disableDefaultUI = true
      else
        mapOptions.mapTypeControl = true
        mapOptions.mapTypeControlOptions =
          style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
        mapOptions.navigationControl = true

      #always no zoom viz scrollwheel
      mapOptions.scrollwheel = false
      if @options.noZoom
        mapOptions.disableDoubleClickZoom = true
        # mapOptions.scrollwheel = false
      else
        mapOptions.zoomControl = true
      if @options.noPanning
        mapOptions.draggable = false

      @gMap = new google.maps.Map @el, mapOptions

      style = [{
          featureType: 'all'
          stylers: [ saturation: -99 ]
        }, {
          featureType: 'poi',
          stylers: [ visibility: 'off' ]
        }, {
          featureType: 'road',
          stylers: [ visibility: 'off' ]
        }]

      if @options.whiteBackground
        style.push {
          featureType: 'labels'
          stylers: [ lightness: 100 ]
        }

      styledMapType = new google.maps.StyledMapType style,
        map:  @gMap
        name: 'Styled Map'

      @gMap.mapTypes.set 'map-style', styledMapType
      @gMap.setMapTypeId 'map-style'

    pointFromPair: (pair) ->
      coords = pair
      new google.maps.LatLng parseFloat(pair[1]), parseFloat(pair[0])

    pointsFromKml: (geo) ->
      polygons = geo.coordinates
      polygons = [ polygons ] if geo.type == 'Polygon'

      for polygon in polygons
        @pointFromPair(pair) for pair in polygon[0]

    removePreviousPolygons: ->
      poly.setMap(null) for poly in @polygons
      @polygons = []

    colorShade: (leaderAdvantage) ->
      if leaderAdvantage < gon.colorScheme.threshold.lower
        c = 2
      else if leaderAdvantage < gon.colorScheme.threshold.upper
        c = 1
      else
        c = 0

      gon.colorScheme.saturation[c]

    generateColor: (region, colorCode, color, shade, saturation) ->
      key = "#{region}#{colorCode}#{shade}"

      if region == 'i'
        strokeColor = '#000000'
        fillOpacity = saturation
      else if colorCode == 'n'
        strokeColor = '<%= AppConfig['map_color']['colors']['not_voting'] %>'
        fillOpacity = 1
      else
        strokeColor = '#ffffff'
        fillOpacity = 0.2

      @colors[key] = {
        fillColor:    color
        fillOpacity:  fillOpacity
        hoverColor:   color
        hoverOpacity: 0.9
        strokeColor:  strokeColor
        strokeWeight: if region == 'i' then 0.5 else 0.7
        zIndex:       if region == 'i' then 2 else 1
      }

    initColors: ->
      # region: i / o
      #  class: r / c / o / n / 1 / 2
      #  shade: 0 - 2
      @colors = window.mapcolors =
        noResults:
          fillColor:     gon.colorScheme.colors.notVoting
          fillOpacity:   1
          hoverColor:    gon.colorScheme.colors.notVoting
          hoverOpacity:  0.9
          strokeColor:   if @options.whiteBackground then '#bbbbbb' else '#ffffff'
          strokeWeight:  0.7
          zIndex:         1

      # generate candidate / ballot shades
      for region in [ 'i', 'o' ]
        for cl in [ [ 'r', '<%= AppConfig['map_color']['colors']['republican'] %>' ],
                    [ 'd', '<%= AppConfig['map_color']['colors']['democrat'] %>' ],
                    [ 'o', '<%= AppConfig['map_color']['colors']['other'] %>' ],
                    [ 'a', '<%= AppConfig['map_color']['colors']['other1'] %>' ],
                    [ 'b', '<%= AppConfig['map_color']['colors']['other2'] %>' ],
                    [ 'c', '<%= AppConfig['map_color']['colors']['other3'] %>' ],
                    [ 'n', '<%= AppConfig['map_color']['colors']['not_reporting'] %>' ],
                    [ '1', '<%= AppConfig['map_color']['colors']['nonpartisan1'] %>' ],
                    [ '2', '<%= AppConfig['map_color']['colors']['nonpartisan2'] %>' ],
                    [ 'Y', '<%= AppConfig['map_color']['colors']['referenda_yes'] %>' ],
                    [ 'N', '<%= AppConfig['map_color']['colors']['referenda_no'] %>' ],
                    [ 't', '<%= AppConfig['map_color']['colors']['tie'] %>' ] ]
          clc = cl[0]
          color = cl[1]
          for shade in [ 0, 1, 2 ]
            @generateColor region, clc, color, shade, gon.colorScheme.saturation[shade]

      # generate participation shades
      pc = '<%= AppConfig['map_color']['colors']['participation'] %>'
      for shade in [ 0, 1, 2, 3, 4, 5 ]
        @generateColor 'i', 'p', pc, shade, 1 - shade * 0.2
        @generateColor 'o', 'p', pc, shade, 1 - shade * 0.8
      # @generateColor 'i', 'p', pc, 1, .8
      # @generateColor 'i', 'p', pc, 2, .6
      # @generateColor 'i', 'p', pc, 3, .4
      # @generateColor 'i', 'p', pc, 4, .2
      # @generateColor 'i', 'p', pc, 5, 0
      

      undefined

    findPrecinctColors: (precinctColor) ->
      if precinctColor?
        colors = @colors[precinctColor.get(@colorKey)]
      else
        colors = @colors.noResults

      return colors

    onPolygonMouseOver: (e) ->
      if @.data.mapView.options.infoWindow isnt 'simple'
        @setOptions
          fillColor:   @.data.colors.hoverFillColor
          fillOpacity: @.data.colors.hoverFillOpacity

        # close previous bubble
        mapView = @.data.mapView
        mapView.closeInfoWindow()

        pid = @.data.precinctId
        result = mapView.precinctResults.get('precincts').get(pid)
        return unless result?

        do (self = @, e) ->
          createBubble = ->
            mapView = self.data.mapView
            pid = self.data.precinctId
            result = mapView.precinctResults.get('precincts').get(pid)
            if result
              precincts = App.request 'entities:precincts'
              precinct  = precincts.get pid
              mapView.focusedPrecinct = precinct

              html = mapView.fullInfoWindowHtml self, precinct
            else
              html = "<%= I18n.t 'scoreboard.not_voting' %>"

            window.infoBubble = ib = new InfoBubble
              content: html
              position: e.latLng
              gMap: mapView.gMap
              padding: 0
              borderRadius: 0
              hideCloseButton: true
              shadowStyle: 0
              disableAnimation: true
            $(ib.arrowInner_).css
              borderColor: '#f3f3f3 transparent transparent'

            self = mapView
            $(ib.bubble_).on 'click', (e) ->
              return unless e.target.tagName == 'A'

              e.preventDefault()
              precinct = self.focusedPrecinct
              self.focusedPrecinct = null

              if self.options.infoWindow != 'simple'
                # set params and navigate to the list page
                su = App.request("entities:scoreboardUrl")
                si = App.request("entities:scoreboardInfo")
                si.set('region', precinct)
                su.setView('list')
                
              else
                App.vent.trigger 'region:selected', precinct

              # if self.options.infoWindow != 'simple'
              #   App.navigate 'list', trigger: true

            ib.open(mapView.gMap)

          mapView.timeout = setTimeout createBubble, 50

    onPolygonMouseOut: ->
      @setOptions
        fillColor:   @.data.colors.fillColor
        fillOpacity: @.data.colors.fillOpacity

      @.data.mapView.closeInfoWindow()

    fullInfoWindowHtml: (poly, precinct) ->
      si = App.request 'entities:scoreboardInfo'
      results = si.get 'precinctResults'
      result = si.get 'result'
      summary = result.get 'summary'
      title = summary.get 'title'
      
      precinctResult = poly.data.mapView.precinctResults.get('precincts').get(poly.data.precinctId)
      rows  = precinctResult.get('rows')
      votes = precinctResult.get('votes')

      rowsHtml = ""
      items = results.get('items')

      totalDisplayed = 0
      for row in rows.models
        i = items.get row.get('id')
        v = row.get('votes') || 0
        totalDisplayed += v
        p = Math.floor((v * 1000) / (votes || 1)) / 10.0
        color = i.get('c')
        name = i.get('name')
        rowsHtml += "<tr style='color: #{color};'><td class='iw-n'>#{name.toLowerCase().replace(' and ', ' & ')}</td><td class='iw-v'>#{v}</td><td class='iw-p'>#{p}%</td></tr>"

      if votes > totalDisplayed
        v = votes - totalDisplayed
        p = Math.floor((v * 1000) / (votes || 1)) / 10.0
        rowsHtml += "<tr class='other'><td class='iw-n'>Others</td><td class='iw-v'>#{v}</td><td class='iw-p'>#{p}%</td></tr>"

      "<div class='precinct-bubble'><div class='iw-c'><h5>#{precinct.get('name')}</h5><table class='iw-rows'>#{rowsHtml}</table></div><div class='iw-all'><a href='#'>View All Results</a></div></div>"

    simpleInfoWindowHtml: (poly, precinct) ->
      "<div class='precinct-bubble'><div class='iw-c'><h5>#{precinct.get('name')}</h5></div><div class='iw-all'><a href='#'>Set as Region</a></div></div>"

    onPolygonClick: ->
      pid = @.data.precinctId
      if @.data.mapView.options.infoWindow isnt 'simple'
        @setOptions
          fillColor:   @.data.colors.hoverFillColor
          fillOpacity: @.data.colors.hoverFillOpacity

        precincts = App.request 'entities:precincts'
        precinct  = precincts.get pid

        App.vent.trigger 'region:selected', precinct

    updateColorKey: ->
      @colorKey = switch @options.coloringType
        when 'results'
          'c'
        when 'participation'
          'p'
        when 'partyRegistration'
          'pr'
        else
          'c'

    renderPrecincts: ->
      App.execute 'when:fetched', @precincts, =>
        @initMap()
        @removePreviousPolygons()

        precincts = @precinctResults.get 'precincts'
        bounds  = new google.maps.LatLngBounds()

        @updateColorKey()
        for precinct in @precincts.models
          this_bounds = new google.maps.LatLngBounds()
          precinctId = precinct.get 'id'

          res = precincts.get precinctId
          color = @precinctColors.get precinctId
          kml = precinct.get 'kml'
          colors = @findPrecinctColors color
          lines = @pointsFromKml(kml)

          for points in lines
            for point in points
              this_bounds.extend(point)
              bounds.extend(point)

          precinct.bounds = this_bounds
          
          poly = new google.maps.Polygon
            paths:          lines,
            strokeColor:    colors.strokeColor
            strokeOpacity:  0.5
            strokeWeight:   colors.strokeWeight
            fillColor:      colors.fillColor
            fillOpacity:    colors.fillOpacity
            zIndex:         colors.zIndex
            data:
              precinctId:       precinctId
              colors:           colors
              mapView:          @

          if @options.infoWindow
            google.maps.event.addListener poly, 'mouseover', @onPolygonMouseOver
            google.maps.event.addListener poly, 'mouseout', @onPolygonMouseOut
            google.maps.event.addListener poly, 'click', @onPolygonClick

          @polygons.push poly
          poly.setMap @gMap

        @gMap.fitBounds bounds
