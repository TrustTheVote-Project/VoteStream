# alternative panning to fit just the bubble
InfoBubble.prototype.panToView = ->
  projection = @getProjection()

  return if !projection
  return if !@bubble_
  
  anchorHeight = @getAnchorHeight_()
  height       = @bubble_.offsetHeight + anchorHeight
  gMap         = @get('gMap')
  mapDiv       = gMap.getDiv()
  mapHeight    = mapDiv.offsetHeight
  latLng       = @getPosition()
  centerPos    = projection.fromLatLngToContainerPixel(gMap.getCenter())
  pos          = projection.fromLatLngToContainerPixel(latLng)

  padding      = 20 # 20 pixels padding around bubble
  yDelta       = (height + padding) - pos.y

  if yDelta > 0
    centerPos.y -= yDelta
    gMap.panTo(projection.fromContainerPixelToLatLng(centerPos))


@App.module "ScoreboardsApp.Show", (Show, App, Backbone, Marionette, $, _) ->

  class Show.MapView extends Marionette.ItemView
    template: 'scoreboards/show/_map'
    className: 'map-view'

    initialize: (options = {}) ->
      @polygons = []
      @options = options

      @precinctResults = @options.precinctResults #si.get 'precinctResults'

      @precinctResults.on 'sync', =>
        @renderPrecincts()

      @precincts = @options.precincts #App.request 'entities:precincts'
      @counties = @options.counties || []
      
    onClose: ->
      @closeInfoWindow()
      @removePreviousPolygons()
      delete @gMap
      @initMap

    closeInfoWindow: ->
      if @timeout
        clearTimeout @timeout
        @timeout = null

      if window.infoBubble?
        do (bubble = window.infoBubble) ->
          setTimeout (->
            bubble.close()
            $(bubble.bubble_).remove()
          ), 0
        window.infoBubble = null

    initMap: ->
      center = new google.maps.LatLng gon.mapCenterLat, gon.mapCenterLon
      mapOptions =
        center:                 center
        zoom:                   @options.zoomLevel || gon.mapZoom
        mapTypeId:              google.maps.MapTypeId.ROADMAP

      # https://developers.google.com/maps/documentation/javascript/controls
      mapOptions.mapTypeControl = false
      if @options.hideControls
        mapOptions.disableDefaultUI = true
      else
        # mapOptions.mapTypeControlOptions =
        #   style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
        mapOptions.navigationControl = true

      #always no zoom viz scrollwheel
      mapOptions.scrollwheel = false
      if @options.noZoom
        mapOptions.disableDoubleClickZoom = true
        # mapOptions.scrollwheel = false
      else
        mapOptions.zoomControl = true
      if @options.noPanning
        mapOptions.draggable = false
      
      @gMap = new google.maps.Map @el, mapOptions
      
      style = [{
          featureType: 'all'
          stylers: [ saturation: -99 ]
        }, {
          featureType: 'poi',
          stylers: [ visibility: 'off' ]
        }, {
          featureType: 'road',
          stylers: [ visibility: 'off' ]
        }]

      if @options.whiteBackground
        style.push {
          featureType: 'labels'
          stylers: [ lightness: 100 ]
        }

      styledMapType = new google.maps.StyledMapType style,
        map:  @gMap
        name: 'Styled Map'

      @gMap.mapTypes.set 'map-style', styledMapType
      @gMap.setMapTypeId 'map-style'

    pointFromPair: (pair) ->
      coords = pair
      new google.maps.LatLng parseFloat(pair[1]), parseFloat(pair[0])

    pointsFromKml: (geo) ->
      polygons = geo.coordinates
      polygons = [ polygons ] if geo.type == 'Polygon'

      for polygon in polygons
        @pointFromPair(pair) for pair in polygon[0]

    removePreviousPolygons: ->
      poly.setMap(null) for poly in @polygons
      @polygons = []

    onPolygonMouseOver: (e) ->
      if @.data.mapView.options.infoWindow isnt 'simple'
        @setOptions
          fillColor:   @.data.colors.hoverFillColor
          fillOpacity: @.data.colors.hoverFillOpacity

        # close previous bubble
        mapView = @.data.mapView
        mapView.closeInfoWindow()

        pid = @.data.precinctId
        result = mapView.precinctResults.get('precincts').get(pid)
        return unless result?

        do (self = @, e) ->
          createBubble = ->
            mapView = self.data.mapView
            pid = self.data.precinctId
            result = mapView.precinctResults.get('precincts').get(pid)
            if result
              precincts = App.request 'entities:precincts'
              precinct  = precincts.get pid
              mapView.focusedPrecinct = precinct

              html = mapView.fullInfoWindowHtml self, precinct
            else
              html = "<%= I18n.t 'scoreboard.not_voting' %>"

            window.infoBubble = ib = new InfoBubble
              content: html
              position: e.latLng
              gMap: mapView.gMap
              padding: 0
              borderRadius: 0
              hideCloseButton: true
              shadowStyle: 0
              disableAnimation: true
            $(ib.arrowInner_).css
              borderColor: '#f3f3f3 transparent transparent'

            self = mapView
            $(ib.bubble_).on 'click', (e) ->
              return unless e.target.tagName == 'A'

              e.preventDefault()
              precinct = self.focusedPrecinct
              self.focusedPrecinct = null

              if self.options.infoWindow != 'simple'
                # set params and navigate to the list page
                su = App.request("entities:scoreboardUrl")
                si = App.request("entities:scoreboardInfo")
                si.set('region', precinct)
                su.setView('list')
                
              else
                App.vent.trigger 'region:selected', precinct

              # if self.options.infoWindow != 'simple'
              #   App.navigate 'list', trigger: true

            ib.open(mapView.gMap)

          mapView.timeout = setTimeout createBubble, 50

    onPolygonMouseOut: ->
      @setOptions
        fillColor:   @.data.colors.fillColor
        fillOpacity: @.data.colors.fillOpacity

      @.data.mapView.closeInfoWindow()

    fullInfoWindowHtml: (poly, precinct) ->
      si = App.request 'entities:scoreboardInfo'
      results = si.get 'precinctResults'
      result = si.get 'result'
      summary = result.get 'summary'
      title = summary.get 'title'
      
      precinctResult = poly.data.mapView.precinctResults.get('precincts').get(poly.data.precinctId)
      rows  = precinctResult.get('rows')
      votes = precinctResult.get('votes')

      rowsHtml = ""
      items = results.get('items')

      totalDisplayed = 0
      for row in rows.models
        i = items.get row.get('id')
        v = row.get('votes') || 0
        totalDisplayed += v
        p = Math.floor((v * 1000) / (votes || 1)) / 10.0
        color = i.get('c')
        name = i.get('name')
        rowsHtml += "<tr style='color: #{color};'><td class='iw-n'>#{name.toLowerCase().replace(' and ', ' & ')}</td><td class='iw-v'>#{v}</td><td class='iw-p'>#{p}%</td></tr>"

      if votes > totalDisplayed
        v = votes - totalDisplayed
        p = Math.floor((v * 1000) / (votes || 1)) / 10.0
        rowsHtml += "<tr class='other'><td class='iw-n'>Others</td><td class='iw-v'>#{v}</td><td class='iw-p'>#{p}%</td></tr>"

      "<div class='precinct-bubble'><div class='iw-c'><h5>#{precinct.get('name')}</h5><table class='iw-rows'>#{rowsHtml}</table></div><div class='iw-all'><a href='#'>View All Results</a></div></div>"

    simpleInfoWindowHtml: (poly, precinct) ->
      "<div class='precinct-bubble'><div class='iw-c'><h5>#{precinct.get('name')}</h5></div><div class='iw-all'><a href='#'>Set as Region</a></div></div>"

    onPolygonClick: ->
      pid = @.data.precinctId
      if @.data.mapView.options.infoWindow isnt 'simple'
        @setOptions
          fillColor:   @.data.colors.hoverFillColor
          fillOpacity: @.data.colors.hoverFillOpacity

        precincts = App.request 'entities:precincts'
        precinct  = precincts.get pid

        App.vent.trigger 'region:selected', precinct

    calculateColor: (resultDetailList, in_region) ->
      # determine leader
      opacity = 1
      if @options.coloringType == 'participation'
        color = '<%= AppConfig['map_color']['colors']['participation'] %>'
        if resultDetailList.length > 0
          if in_region
            opacity = ((resultDetailList[0].participation_percentage / 100) * .8) + .2
          else
            opacity = ((resultDetailList[0].participation_percentage / 100) * .15)
            
      else if @options.coloringType == 'partyRegistration'
        if resultDetailList.length > 0
          res = resultDetailList[0]
          color = '<%= AppConfig['map_color']['colors']['other'] %>'
          opacity = 1
          pctDem = (res['demReg'] / (res['demReg'] + res['repReg'] * 1.0)) * 100.0
          if pctDem > 50
            color = '<%= AppConfig['map_color']['colors']['democrat'] %>'
            opacity =  <%= AppConfig['map_color']['saturation']['low'] %>
          if pctDem < 50
            color = '<%= AppConfig['map_color']['colors']['republican'] %>'
            opacity =  <%= AppConfig['map_color']['saturation']['low'] %>            
          if pctDem > 50 + 2 * <%= AppConfig['map_color']['threshold']['upper'] %> or pctDem < 50 - 2 * <%= AppConfig['map_color']['threshold']['upper'] %>
            opacity =  1
          else if pctDem > 50 + <%= AppConfig['map_color']['threshold']['upper'] %> or pctDem < 50 - <%= AppConfig['map_color']['threshold']['upper'] %>
            opacity =  <%= AppConfig['map_color']['saturation']['high'] %>
          else if pctDem > 50 + <%= AppConfig['map_color']['threshold']['lower'] %> or pctDem < 50 - <%= AppConfig['map_color']['threshold']['lower'] %>
            opacity = <%= AppConfig['map_color']['saturation']['middle']%>
            
          if not in_region
            opacity = opacity * .2
      else 
        sortedResults = resultDetailList.sort (a,b) ->
          if b.percentage < a.percentage 
            -1
          else if a.percentage < b.percentage
            1
          else
            0
        leader = sortedResults[0]
        color = '<%= AppConfig['map_color']['colors']['other'] %>'
        if leader.votes == 0
          color = '<%= AppConfig['map_color']['colors']['not_reporting'] %>'
        else
          if sortedResults.length > 1
            second = sortedResults[1]
            percent_diff = leader.percentage - second.percentage
            # opacity = (leader.percentage - second.percentage) / 100
            if percent_diff > 2 * <%= AppConfig['map_color']['threshold']['upper'] %>
              opacity = 1
            else if percent_diff > <%= AppConfig['map_color']['threshold']['upper'] %>
              opacity = <%= AppConfig['map_color']['saturation']['high'] %>
            else if percent_diff > <%= AppConfig['map_color']['threshold']['lower'] %>
              opacity = <%= AppConfig['map_color']['saturation']['middle'] %>
            else
              opacity = <%= AppConfig['map_color']['saturation']['low'] %>
          
          if leader.party
            if leader.party.abbr == "DEM"
              color = '<%= AppConfig['map_color']['colors']['democrat'] %>'
            else if leader.party.abbr == "REP"
              color = '<%= AppConfig['map_color']['colors']['republican'] %>'
            else
              color = leader.color
          else
            color = leader.color
          
          if not in_region
            opacity = 0.1
          
      return {
        fillColor: color
        fillOpacity: opacity
        strokeColor: if in_region then "#000000" else '<%= AppConfig['map_color']['colors']['not_voting'] %>'
        strokeWeight: if in_region then 0.7 else 0.5
        strokeOpacity: if in_region then 0.8 else 0.5
        zIndex: if in_region then 2 else 1 
      }

    renderPrecincts: ->
      App.execute 'when:fetched', [@precincts, @precinctResults, @counties], =>
        @initMap()
        @removePreviousPolygons()

        if @counties.length > 0
          for county in @counties.models
            kml = county.get 'kml'
            lines = @pointsFromKml(kml)
            poly = new google.maps.Polygon
              paths:          lines,
              strokeColor:  '#ffffff'
              strokeWeight: .5
              strokeOpacity: 1
              fillColor:      "#ffffff"
              fillOpacity:    0
              zIndex:         5
              data:
                districtId:       county.get('id')
                mapView:          @
            @polygons.push poly
            poly.setMap @gMap
              

        precinct_results = @precinctResults.get 'precincts'
        bounds  = new google.maps.LatLngBounds()
        row_items = @precinctResults.get 'items'

        for precinct in @precincts.models
          this_bounds = new google.maps.LatLngBounds()
          precinctId = precinct.get 'id'

          res = precinct_results.get precinctId
          voters = precinct.get('voters')
          
          
          if res
            result_rows = res.get('rows')
            total_votes = res.get('votes')
            partyRegistrations = res.get('party_registrations')
            demReg = if partyRegistrations then partyRegistrations['Democrat'] || 0 else 0
            repReg = if partyRegistrations then partyRegistrations['Republic'] || 0 else 0
            
          
            full_results = []
            for row in result_rows.models
              row_id = row.get 'id'
              row_item = row_items.get row_id
              v = row.get('votes') || 0
              full_results.push
                votes: v
                total_votes: total_votes
                name: row_item.get('name')
                party: row_item.get('party')
                percentage: Math.floor((v * 1000) / (total_votes || 1)) / 10.0
                voters: voters
                demReg: demReg
                repReg: repReg
                participation_percentage: Math.floor((total_votes * 1000) / (voters || 1)) / 10.0
                color: row_item.get('c')
            colors = @calculateColor(full_results, res.get('in_region'))
          else
            #console.log('howd we get here?', precinctId, precinct_results)
            #color = @precinctColors.get precinctId
            #colors = @findPrecinctColors color
            colors =
              fillColor: '<%= AppConfig['map_color']['colors']['not_voting'] %>'
              fillOpacity: 1
              strokeColor:  '#000000'
              strokeWeight: 0.3
              strokeOpacity: 0.3
              zIndex: 1
          
          #console.log(full_results)
          # color = @precinctColors.get precinctId
          # console.log color
          kml = precinct.get 'kml'
          # colors = @findPrecinctColors color
          lines = @pointsFromKml(kml)

          for points in lines
            for point in points
              this_bounds.extend(point)
              bounds.extend(point)

          precinct.bounds = this_bounds
          
          poly = new google.maps.Polygon
            paths:          lines,
            strokeColor:    colors.strokeColor
            strokeOpacity:  0.5
            strokeWeight:   colors.strokeWeight
            fillColor:      colors.fillColor
            fillOpacity:    colors.fillOpacity
            zIndex:         colors.zIndex
            data:
              precinctId:       precinctId
              colors:           colors
              mapView:          @

          if @options.infoWindow and res and res.get('in_region')
            google.maps.event.addListener poly, 'mouseover', @onPolygonMouseOver
            google.maps.event.addListener poly, 'mouseout', @onPolygonMouseOut
            google.maps.event.addListener poly, 'click', @onPolygonClick

          @polygons.push poly
          poly.setMap @gMap

        @gMap.fitBounds bounds
