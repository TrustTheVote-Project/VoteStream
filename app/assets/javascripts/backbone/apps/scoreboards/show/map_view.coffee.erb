# alternative panning to fit just the bubble
InfoBubble.prototype.panToView = ->
  projection = @getProjection()

  return if !projection
  return if !@bubble_

  anchorHeight = @getAnchorHeight_()
  height       = @bubble_.offsetHeight + anchorHeight
  map          = @get('map')
  mapDiv       = map.getDiv()
  mapHeight    = mapDiv.offsetHeight
  latLng       = @getPosition()
  centerPos    = projection.fromLatLngToContainerPixel(map.getCenter())
  pos          = projection.fromLatLngToContainerPixel(latLng)

  padding      = 20 # 20 pixels padding around bubble
  yDelta       = (height + padding) - pos.y

  if yDelta > 0
    centerPos.y -= yDelta
    map.panTo(projection.fromContainerPixelToLatLng(centerPos))


@App.module "ScoreboardsApp.Show", (Show, App, Backbone, Marionette, $, _) ->

  class Show.MapView extends Marionette.ItemView
    template: 'scoreboards/show/_map'
    id: 'map-view'

    initialize: (options = {}) ->
      @polygons = []
      @options = options

      si = App.request 'entities:scoreboardInfo'
      @precinctResults = si.get 'precinctResults'
      @precinctResults.on 'sync', @updateColors, @
      @precincts = App.request 'entities:precincts'

    updateColors: ->
      @closeInfoWindow()

      items     = @precinctResults.get 'items'
      precincts = @precinctResults.get 'precincts'

      for p in @polygons
        res = precincts.get p.data.precinctId
        p.data.colors = @precinctColors items, res
        p.data.precinctResult = res

        p.setOptions
          fillColor:   p.data.colors.fillColor
          fillOpacity: p.data.colors.fillOpacity
          strokeColor: p.data.colors.strokeColor
          strokeWeight: p.data.colors.strokeWeight
          zIndex:       p.data.colors.zIndex

    onShow: ->
      @initMap()
      @renderPrecincts()

    onClose: ->
      @closeInfoWindow()
      @removePreviousPolygons()
      @precinctResults.off 'sync', @updateColors, @
      delete @map
      delete @polygons
      delete @precinctResults
      delete @precincts

    closeInfoWindow: ->
      if window.infoBubble?
        window.infoBubble.close()
        window.infoBubble = null

    initMap: ->
      center = new google.maps.LatLng gon.mapCenterLat, gon.mapCenterLon
      mapOptions =
        center:                 center
        zoom:                   gon.mapZoom
        mapTypeId:              google.maps.MapTypeId.ROADMAP

      if @options.hideControls
        mapOptions.disableDefaultUI = true
      else
        mapOptions.mapTypeControl = true
        mapOptions.mapTypeControlOptions =
          style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
        mapOptions.navigationControl = true

      if @options.noZoom
        mapOptions.disableDoubleClickZoom = true
        mapOptions.scrollwheel = false
      if @options.noPanning
        mapOptions.draggable = false

      @map = new google.maps.Map @el, mapOptions

      style = [{
          featureType: 'all'
          stylers: [ saturation: -99 ]
        }, {
          featureType: 'poi',
          stylers: [ visibility: 'off' ]
        }, {
          featureType: 'road',
          stylers: [ visibility: 'off' ]
        }]

      if @options.whiteBackground
        style.push {
          featureType: 'labels'
          stylers: [ lightness: 100 ]
        }

      styledMapType = new google.maps.StyledMapType style,
        map:  @map
        name: 'Styled Map'

      @map.mapTypes.set 'map-style', styledMapType
      @map.setMapTypeId 'map-style'

    pointFromPair: (pair) ->
      coords = pair.split(',')
      new google.maps.LatLng parseFloat(coords[1]), parseFloat(coords[0])

    pointsFromKml: (kmls) ->
      for kml in kmls
        @pointFromPair(pair) for pair in kml.split(' ')

    removePreviousPolygons: ->
      poly.setMap(null) for poly in @polygons
      @polygons = []

    colorShade: (leaderAdvantage) ->
      if leaderAdvantage < gon.colorScheme.threshold.lower
        c = 2
      else if leaderAdvantage < gon.colorScheme.threshold.upper
        c = 1
      else
        c = 0

      gon.colorScheme.saturation[c]

    precinctColors: (items, precinctResult) ->
      # Default (not in range precinct) colors are all the same
      fillColor     = gon.colorScheme.colors.notVoting
      fillOpacity   = 1
      hoverColor    = fillColor
      hoverOpacity  = 0.9
      strokeColor   = '#ffffff'
      strokeWeight  = 0.7
      zIndex        = 1

      if precinctResult?
        # Highlight with opacity if precinct is in range
        inRegion = precinctResult.get('inRegion')
        if inRegion
          strokeColor  = '#000000'
          strokeWeight = .5
          zIndex       = 2

        precinctVotes = precinctResult.get('votes')
        if precinctVotes == 0
          # Precinct is not reporting
          fillColor = gon.colorScheme.colors.notReporting

          # NOTE: Just to keep contrast right with something configurable
          unless inRegion
            strokeColor = gon.colorScheme.colors.notVoting
        else
          rows = precinctResult.get('rows')
          fillColor = precinctResult.get 'c'
          leaderAdvantage = precinctResult.get 'adv'
          fillOpacity = @colorShade leaderAdvantage
          hoverColor = fillColor
      else
        strokeColor = '#bbbbbb' if @options.whiteBackground

      return {
        fillColor:        fillColor
        fillOpacity:      fillOpacity
        hoverFillColor:   hoverColor
        hoverFillOpacity: hoverOpacity
        strokeColor:      strokeColor
        strokeWeight:     strokeWeight
        zIndex:           zIndex
      }

    onPolygonMouseOver: (e) ->
      if @.data.mapView.options.infoWindow isnt 'simple'
        @setOptions
          fillColor:   @.data.colors.hoverFillColor
          fillOpacity: @.data.colors.hoverFillOpacity

        mapView = @.data.mapView
        if @.data.precinctResult?
          pid = @.data.precinctId
          precincts = App.request 'entities:precincts'
          precinct = precincts.get pid
          mapView.focusedPrecinct = precinct

          if mapView.options.infoWindow == 'simple'
            html = mapView.simpleInfoWindowHtml @, precinct
          else
            html = mapView.fullInfoWindowHtml @, precinct
        else
          html = "<%= I18n.t 'scoreboard.not_voting' %>"

        # close previous bubble
        mapView.closeInfoWindow()

        create_bubble = ->
          window.infoBubble = ib = new InfoBubble
            content: html
            position: precinct.bounds.getCenter()
            map: mapView.map
            padding: 0
            borderRadius: 0
            hideCloseButton: true
            shadowStyle: 0
            disableAnimation: true
          $(ib.arrowInner_).css
            borderColor: '#f3f3f3 transparent transparent'

          self = mapView
          $(ib.bubble_).on 'click', (e) ->
            return unless e.target.tagName == 'A'

            precinct = self.focusedPrecinct
            self.focusedPrecinct = null

            App.vent.trigger 'region:selected', precinct

            if self.options.infoWindow != 'simple'
              App.navigate 'list', trigger: true

          ib.open()

        @timeout = setTimeout create_bubble, 250

    onPolygonMouseOut: ->
      @setOptions
        fillColor:   @.data.colors.fillColor
        fillOpacity: @.data.colors.fillOpacity

      @.data.mapView.closeInfoWindow()
      clearTimeout @timeout

    fullInfoWindowHtml: (poly, precinct) ->
      si = App.request 'entities:scoreboardInfo'
      results = si.get 'precinctResults'
      result = si.get 'result'
      title = result.get('summary').get('title')

      precinctResult = poly.data.precinctResult
      rows  = precinctResult.get('rows')
      votes = precinctResult.get('votes')

      rowsHtml = ""
      items = results.get('items')

      totalDisplayed = 0
      for row in rows.models
        i = items.get row.get('id')
        v = row.get('votes') || 0
        totalDisplayed += v
        p = Math.floor((v * 1000) / (votes || 1)) / 10.0
        color = i.get('c')
        name = i.get('name')
        rowsHtml += "<tr style='color: #{color};'><td class='iw-n'>#{name.toLowerCase().replace('and','&')}</td><td class='iw-v'>#{v}</td><td class='iw-p'>#{p}%</td></tr>"

      if votes > totalDisplayed
        v = votes - totalDisplayed
        p = Math.floor((v * 1000) / (votes || 1)) / 10.0
        rowsHtml += "<tr class='other'><td class='iw-n'>Others</td><td class='iw-v'>#{v}</td><td class='iw-p'>#{p}%</td></tr>"

      "<div class='precinct-bubble'><div class='iw-c'><h5>#{precinct.get('name')}</h5><table class='iw-rows'>#{rowsHtml}</table></div></div>"

    simpleInfoWindowHtml: (poly, precinct) ->
      "<div class='precinct-bubble'><div class='iw-c'><h5>#{precinct.get('name')}</h5></div><div class='iw-all'><a href='#'>Set as Region</a></div></div>"

    onPolygonClick: ->
      if @.data.precinctResult? and @.data.mapView.options.infoWindow isnt 'simple'
        @setOptions
          fillColor:   @.data.colors.hoverFillColor
          fillOpacity: @.data.colors.hoverFillOpacity

        pid = @.data.precinctId
        precincts = App.request 'entities:precincts'
        precinct = precincts.get pid
        
        App.vent.trigger 'region:selected', precinct
        App.navigate 'list', trigger: true
      
    renderPrecincts: ->
      App.execute 'when:fetched', @precincts, =>
        @removePreviousPolygons()


        bounds  = new google.maps.LatLngBounds()
        results = @precinctResults.get 'precincts'
        items   = @precinctResults.get 'items'

        for precinct in @precincts.models
          this_bounds = new google.maps.LatLngBounds()
          precinctId = precinct.get 'id'
          res = results.get precinctId
          kml = precinct.get 'kml'
          colors = @precinctColors items, res

          lines = @pointsFromKml(kml)

          for points in lines
            for point in points
              this_bounds.extend(point)
              bounds.extend(point)

          precinct.bounds = this_bounds

          poly = new google.maps.Polygon
            paths:          lines,
            strokeColor:    colors.strokeColor
            strokeOpacity:  1
            strokeWeight:   colors.strokeWeight
            fillColor:      colors.fillColor
            fillOpacity:    colors.fillOpacity
            zIndex:         colors.zIndex
            data:
              precinctId:       precinctId
              colors:           colors
              precinctResult:   res
              mapView:          @

          if @options.infoWindow
            google.maps.event.addListener poly, 'mouseover', @onPolygonMouseOver
            google.maps.event.addListener poly, 'mouseout', @onPolygonMouseOut
            google.maps.event.addListener poly, 'click', @onPolygonClick

          @polygons.push poly
          poly.setMap @map

        @map.fitBounds bounds

        @.$el.on 'map:show', (e) =>
          @map.setCenter(bounds.getCenter())
          google.maps.event.trigger(@map, "resize");